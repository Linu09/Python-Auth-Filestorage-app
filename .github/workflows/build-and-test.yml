# .github/workflows/build-and-test.yml

name: Build and Test

on:
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      BUCKET_NAME: ${{ vars.BUCKET_NAME }}
      DATASET_ID: ${{ vars.DATASET_ID }}
      TABLE_ID: ${{ vars.TABLE_ID }}
      GCP_RESOURCE_REGION: ${{ vars.GCP_RESOURCE_REGION }}
      GCP_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
      GCP_ARTIFACT_REPOSITORY_NAME: ${{ vars.GCP_ARTIFACT_REPOSITORY_NAME }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Debug Google Credentials
      run: |
        echo "Credentials: $GOOGLE_APPLICATION_CREDENTIALS"

    - name: Run unit tests
      run: |
        pytest tests/

  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      # authenticating with Gcloud example
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_KEY_FILE }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        
      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: "${{ vars.GCP_RESOURCE_REGION }}-docker.pkg.dev"
          username: _json_key_base64
          password: ${{ secrets.GCP_KEY_FILE }}

  # authenticating with Docker example
      - name: Build and push image to GAR
        run: |
          RAW_IMAGE=${{ vars.GCP_RESOURCE_REGION }}-docker.pkg.dev/$GCP_PROJECT/file-upload-repo/file-upload
          IMAGE_URI=${{ vars.GCP_RESOURCE_REGION }}-docker.pkg.dev/$GCP_PROJECT/file-upload-repofile-upload:$GITHUB_SHA
    
          docker build .

          docker tag $RAW_IMAGE $IMAGE_URI
          docker push $RAW_IMAGE
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_OUTPUT
        shell: bash
